---
- name: Setup Kubernetes Tools
  hosts: all
  become: yes
  vars:
    cluster_arn: "{{ EKS_CLUSTER_ARN }}"
    aws_access_key_id: "{{ AWS_ACCESS_KEY_ID }}"
    aws_secret_access_key: "{{ AWS_SECRET_ACCESS_KEY }}"
    aws_region: "{{ AWS_REGION }}"

  tasks:
    - name: Install required packages
      yum:
        name:
          - unzip
          - git
          - docker
        state: latest

    - name: Install kubectl
      get_url:
        url: "https://s3.us-west-2.amazonaws.com/amazon-eks/1.26.4/2023-05-11/bin/linux/amd64/kubectl"
        dest: "/usr/local/bin/kubectl"
        mode: '0755'

    - name: Install aws-iam-authenticator
      get_url:
        url: "https://amazon-eks.s3.us-west-2.amazonaws.com/1.26.4/2023-05-11/bin/linux/amd64/aws-iam-authenticator"
        dest: "/usr/local/bin/aws-iam-authenticator"
        mode: '0755'

    - name: Install eksctl
      block:
        - name: Get OS name
          command: uname -s
          register: os_name
          changed_when: false
        - name: Download eksctl
          get_url:
            url: "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_{{ os_name.stdout }}_amd64.tar.gz"
            dest: "/tmp/eksctl.tar.gz"
            validate_certs: no
        - name: Extract eksctl
          unarchive:
            src: "/tmp/eksctl.tar.gz"
            dest: "/usr/local/bin/"
            remote_src: yes

    # These tasks usually don't need elevated privileges.
    - name: Download AWS CLI v2
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"
      become: no

    - name: Unzip AWS CLI v2 package
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp/"
        remote_src: yes
      become: no

    - name: Install AWS CLI v2
      command: "/tmp/aws/install"

    - name: Install Helm
      block:
        - name: Download Helm
          get_url:
            url: "https://get.helm.sh/helm-v3.7.0-linux-amd64.tar.gz"
            dest: "/tmp/helm.tar.gz"
        - name: Extract Helm
          unarchive:
            src: "/tmp/helm.tar.gz"
            dest: "/tmp/"
            remote_src: yes
        - name: Move Helm to bin directory
          command: mv /tmp/linux-amd64/helm /usr/local/bin/helm

    - name: Add Helm stable repository
      command:
        cmd: "helm repo add stable https://charts.helm.sh/stable"
      become: no

    - name: Update Helm repositories
      command:
        cmd: "helm repo update"
      become: no

    - name: Configure AWS settings
      command:
        cmd: "aws configure set {{ item.name }} {{ item.value }}"
      loop:
        - { name: 'aws_access_key_id', value: '{{ aws_access_key_id }}' }
        - { name: 'aws_secret_access_key', value: '{{ aws_secret_access_key }}' }
        - { name: 'region', value: '{{ aws_region }}' }
      become: no

    # Remaining tasks that might need elevated privileges.
    - name: Update kubeconfig
      command:
        cmd: "aws eks update-kubeconfig --region {{ aws_region }} --name {{ cluster_arn.split('/')[-1] }}"
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_DEFAULT_REGION: "{{ aws_region }}"
      become: no

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    # Update all packages using yum
    - name: Update all packages
      yum:
        name: '*'
        state: latest
      become: yes

    - name: Copy files to remote server's /tmp directory
      copy:
        src: "{{ item }}"
        dest: "/tmp/{{ item }}"
      with_items:
        - storageclass-custom-values.yaml
#        - local-storage-admin-serviceaccount.yaml
#        - local-volume-provisioner-config.yaml
#        - local-volume-provisioner-daemonset.yaml
#        - local-storage-class.yaml
#        - aws-node-configmap.yaml
#        - node-viewer-role.yaml
#        - node-viewer-rolebinding.yaml
#        - create-local-storage-daemonset.yaml 
#        - local-storage-provisioner-rbac.yaml
      become: no

#    - name: Uninstall existing MongoDB Helm release (if exists)
#      command: helm uninstall mongodb
#      ignore_errors: yes
#      become: no

    - name: Delete local-storage related resources if they exist
      command: kubectl delete -f {{ item }}
      with_items:
        - /tmp/storageclass-custom-values.yaml
#        - /tmp/local-volume-provisioner-config.yaml
#        - /tmp/local-volume-provisioner-daemonset.yaml
#        - /tmp/local-storage-class.yaml
#        - /tmp/local-storage-admin-serviceaccount.yaml
#        - /tmp/aws-node-configmap.yaml
#        - /tmp/node-viewer-role.yaml
#        - /tmp/node-viewer-rolebinding.yaml
#        - /tmp/create-local-storage-daemonset.yaml
#        - /tmp/local-storage-provisioner-rbac.yaml 
      ignore_errors: yes
      become: no

#    - name: Apply local-storage resources and ServiceAccount
#      command: kubectl apply -f {{ item }}
#      with_items:
#        - /tmp/storageclass-custom-values.yaml
##        - /tmp/local-storage-admin-serviceaccount.yaml
##        - /tmp/local-volume-provisioner-config.yaml
##        - /tmp/local-volume-provisioner-daemonset.yaml
##        - /tmp/local-storage-class.yaml
##        - /tmp/aws-node-configmap.yaml
##        - /tmp/node-viewer-role.yaml
##        - /tmp/node-viewer-rolebinding.yaml
##        - /tmp/create-local-storage-daemonset.yaml
##        - /tmp/local-storage-provisioner-rbac.yaml 
#      become: no

    - name: Add EKS Helm Repository
      command:
        cmd: "helm repo add eks https://aws.github.io/eks-charts"
      become: no

    - name: Add sig-storage-local-static-provisioner repo to Helm
      command:
        cmd: "helm repo add sig-storage-local-static-provisioner https://kubernetes-sigs.github.io/sig-storage-local-static-provisioner"
      ignore_errors: yes  # This is to ignore errors in case the repo already exists
      become: no

    - name: Add Bitnami repo
      command:
        cmd: "helm repo add bitnami https://charts.bitnami.com/bitnami"
      become: no

    - name: Update Helm repositories
      command:
        cmd: "helm repo update"
      become: no

#    - name: Generate the local-static-provisioner configuration
#      command:
#        cmd: "helm template --debug sig-storage-local-static-provisioner/local-static-provisioner --version 1.0.0 --namespace default > /tmp/local-volume-provisioner.generated.yaml"
#        _uses_shell: true
#      register: helm_output
#      changed_when: false # since this is just a read operation
#      become: no
#
#    - name: Apply the local-static-provisioner configuration
#      command:
#        cmd: "kubectl create -f /tmp/local-volume-provisioner.generated.yaml"
#      when: helm_output.stdout != ""
#      become: no

    # Uninstall MongoDB using Helm (if installed)
    - name: Uninstall MongoDB using Helm
      command:
        cmd: "helm uninstall mongodb"
      ignore_errors: true
      become: no

#    # Install MongoDB using Helm
#    - name: Install MongoDB using Helm
#      command:
#        cmd: "helm install mongodb bitnami/mongodb -f /tmp/storageclass-custom-values.yaml --version 13.16.1"
#      become: no

